


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       *************************************************
    2 00000000         ;                                               uC/OS-II
                       
    3 00000000         ;                                         The Real-Time 
                       Kernel
    4 00000000         ;
    5 00000000         ;                               (c) Copyright 1992-2006,
                        Micrium, Weston, FL
    6 00000000         ;                                          All Rights Re
                       served
    7 00000000         ;
    8 00000000         ;                                           ARM Cortex-M
                       3 Port
    9 00000000         ;
   10 00000000         ; File      : OS_CPU_A.ASM
   11 00000000         ; Version   : V2.89
   12 00000000         ; By        : Jean J. Labrosse
   13 00000000         ;             Brian Nagel
   14 00000000         ;
   15 00000000         ; For       : ARMv7M Cortex-M3
   16 00000000         ; Mode      : Thumb2
   17 00000000         ; Toolchain : RealView Development Suite
   18 00000000         ;             RealView Microcontroller Development Kit (
                       MDK)
   19 00000000         ;             ARM Developer Suite (ADS)
   20 00000000         ;             Keil uVision
   21 00000000         ;*******************************************************
                       *************************************************
   22 00000000         
   23 00000000         ;*******************************************************
                       *************************************************
   24 00000000         ;                                              ¹«¹²º¯Êý
   25 00000000         ;*******************************************************
                       *************************************************
   26 00000000         
   27 00000000                 EXTERN           OSRunning   ; Íâ²¿²Î¿¼£¨Íâ²¿¶¨Ò
                                                            åµÄ±äÁ¿¡¢º¯Êý£¬ÀàËÆ
                                                            ÓÚCÓïÑÔÖÐµÄextern£©
                                                            ¡£
   28 00000000                 EXTERN           OSPrioCur
   29 00000000                 EXTERN           OSPrioHighRdy
   30 00000000                 EXTERN           OSTCBCur
   31 00000000                 EXTERN           OSTCBHighRdy
   32 00000000                 EXTERN           OSIntExit
   33 00000000                 EXTERN           OSTaskSwHook
   34 00000000                 EXTERN           OS_CPU_ExceptStkBase
   35 00000000         
   36 00000000         
   37 00000000                 EXPORT           OS_CPU_SR_Save ; ÔÚÕâ¸öÎÄ¼þÖÐÉù
                                                            Ã÷µÄº¯Êý¡£
   38 00000000                 EXPORT           OS_CPU_SR_Restore
   39 00000000                 EXPORT           OSStartHighRdy
   40 00000000                 EXPORT           OSCtxSw
   41 00000000                 EXPORT           OSIntCtxSw
   42 00000000         ;   ÐÞ¸Ä£¬½«OS_CPU_PendSVHandler¸ÄÎªPendSV_Handler
   43 00000000                 EXPORT           PendSV_Handler
   44 00000000         
   45 00000000         ;*******************************************************



ARM Macro Assembler    Page 2 


                       *************************************************
   46 00000000         ;                                                EQUATES
                       
   47 00000000         ;*******************************************************
                       *************************************************
   48 00000000         
   49 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; ÖÐ¶Ï¿ØÖÆ×´Ì¬¼Ä´æÆ
                                                            ÷¡£
   50 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; ÏµÍ³Òì³£ÓÅÏÈ¼¶¼Ä´
                                                            æÆ÷PRI_14£¬¼´ÉèÖÃPe
                                                            ndSVµÄÓÅÏÈ¼¶¡£
   51 00000000 000000FF 
                       NVIC_PENDSV_PRI
                               EQU              0xFF        ; ¶¨ÒåPendSVµÄ¿É±à³
                                                            ÌÓÅÏÈ¼¶Îª255£¬¼´×îµ
                                                            Í¡£
   52 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; ÖÐ¶Ï¿ØÖÆ¼°×´Ì¬¼Ä´
                                                            æÆ÷ICSRµÄÎ»28 Ð´ 1 
                                                            ÒÔÐüÆð PendSVÖÐ¶Ï¡£
                                                            ¶ÁÈ¡ËüÔò·µ»Ø PendSV
                                                             µÄ×´Ì¬¡£
   53 00000000         
   54 00000000         ;*******************************************************
                       *************************************************
   55 00000000         ;                                                ´úÂëÉú³
                       ÉÖ¸Áî
   56 00000000         ;*******************************************************
                       *************************************************
   57 00000000         
   58 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2 
                                                            ; CODE      : ´úÂë¶
                                                            Î£¬ READONLY : Ö»¶Á
                                                            £¬ALIGN=2 : 4×Ö½Ú¶Ô
                                                            Æë(2^n)¡£
   59 00000000                 THUMB                        ; THUMB     : thumb
                                                            
   60 00000000                 REQUIRE8                     ; require8  : Ö¸¶¨µ
                                                            ±Ç°ÎÄ¼þ¶ÑÕ»ÒªÇó8×Ö½
                                                            Ú¶ÔÆë¡£
   61 00000000                 PRESERVE8                    ; preserve8 : ±£´æµ
                                                            ±Ç°ÎÄ¼þ¶ÑÕ»8×Ö½Ú¶ÔÆ
                                                            ë¡£
   62 00000000         
   63 00000000         ;*******************************************************
                       *************************************************
   64 00000000         ;                                   CRITICAL SECTION MET
                       HOD 3 FUNCTIONS
   65 00000000         ;                                     £¨ÓëÖÐ¶Ï·½Ê½3ÓÐ¹Øµ
                       ÄÁ½»ã±àº¯Êý£©
   66 00000000         ;
   67 00000000         ; Description: Disable/Enable interrupts by preserving t
                       he state of interrupts.  Generally speaking you



ARM Macro Assembler    Page 3 


   68 00000000         ;              would store the state of the interrupt di
                       sable flag in the local variable 'cpu_sr' and then
   69 00000000         ;              disable interrupts.  'cpu_sr' is allocate
                       d in all of uC/OS-II's functions that need to
   70 00000000         ;              disable interrupts.  You would restore th
                       e interrupt disable state by copying back 'cpu_sr'
   71 00000000         ;              into the CPU's status register.
   72 00000000         ;
   73 00000000         ; Prototypes :     OS_CPU_SR  OS_CPU_SR_Save(void);
   74 00000000         ;                  void       OS_CPU_SR_Restore(OS_CPU_S
                       R cpu_sr);
   75 00000000         ;
   76 00000000         ;
   77 00000000         ; Note(s)    : 1) Õâ¸öº¯ÊýÒ»°ãÓÃÓÚÒÔÏÂ½á¹¹:
   78 00000000         ;
   79 00000000         ;                 void Task (void *p_arg)
   80 00000000         ;                 {
   81 00000000         ;                 #if OS_CRITICAL_METHOD == 3          /
                       * Allocate storage for CPU status register */
   82 00000000         ;                     OS_CPU_SR  cpu_sr;
   83 00000000         ;                 #endif
   84 00000000         ;
   85 00000000         ;                          :
   86 00000000         ;                          :
   87 00000000         ;                     OS_ENTER_CRITICAL();             /
                       * cpu_sr = OS_CPU_SaveSR();                */
   88 00000000         ;                          :
   89 00000000         ;                          :
   90 00000000         ;                     OS_EXIT_CRITICAL();              /
                       * OS_CPU_RestoreSR(cpu_sr);                */
   91 00000000         ;                          :
   92 00000000         ;                          :
   93 00000000         ;                 }
   94 00000000         ;*******************************************************
                       *************************************************
   95 00000000         ; ¹ØÈ«¾ÖÖÐ¶ÏÇ°£¬±£´æÈ«¾ÖÖÐ¶Ï±êÖ¾£¬½øÈëÁÙ½çÇø¡£ÍË³öÁÙ½çÇø
                       ºó»Ö¸´ÖÐ¶Ï±ê¼Ç
   96 00000000         OS_CPU_SR_Save                       ; ½øÈëÁÙ½çÇø£¨µÈÍ¬Ó
                                                            ÚOS_ENTER_CRITICAL(
                                                            )£©£¬±£´æÏÖ³¡»·¾³
   97 00000000 F3EF 8010       MRS              R0, PRIMASK ; ¶ÁÈ¡ PRIMASK µ½ R
                                                            0(±£´æÈ«¾ÖÖÐ¶Ï±ê¼Ç£
                                                            ¬³ýÁË¹ÊÕÏÖÐ¶Ï)
   98 00000004 B672            CPSID            I           ; Òì³£ÑÚÂë¼Ä´æÆ÷PRI
                                                            MASK=1£¬¹ØÖÐ¶Ï
   99 00000006 4770            BX               LR          ; ·µ»Ø£¨Ìø×ªµ½LRÁ¬½
                                                            Ó¼Ä´æÆ÷£©¡£
  100 00000008         
  101 00000008         OS_CPU_SR_Restore                    ; ÍË³öÁÙ½çÇø£¨µÈÍ¬Ó
                                                            ÚOS_EXIT_CRITICAL()
                                                            £©£¬»Ö¸´ÏÖ³¡»·¾³  
  102 00000008 F380 8810       MSR              PRIMASK, R0 ; ¶ÁÈ¡ R0µ½PRIMASKÖ
                                                            Ð(»Ö¸´È«¾ÖÖÐ¶Ï±ê¼Ç)
                                                            £¬Í¨¹ýR0´«µÝ²ÎÊý
  103 0000000C 4770            BX               LR          ; ·µ»Ø£¨Ìø×ªµ½LRÁ¬½
                                                            Ó¼Ä´æÆ÷£©¡£
  104 0000000E         
  105 0000000E         ;*******************************************************
                       *************************************************



ARM Macro Assembler    Page 4 


  106 0000000E         ;                                              ¿ªÊ¼¶àÈÎÎ
                       ñ
  107 0000000E         ;                                       void OSStartHigh
                       Rdy(void)
  108 0000000E         ;
  109 0000000E         ; Note(s) : 1) Õâ¸öº¯Êý½«´¥·¢Ò»¸öPendSVÒì³£(ÉÏÏÂÎÄÇÐ»») 
                       Æô¶¯µÚÒ»¸öÈÎÎñ
  110 0000000E         ;
  111 0000000E         ;           2) OSStartHighRdy() MUST:
  112 0000000E         ;              a) ÉèÖÃPendSVÒì³£ÓÅÏÈ¼¶×îµÍ;
  113 0000000E         ;              b) ÉèÖÃ³õÊ¼PSP=0,¸æËßÉÏÏÂÎÄÇÐ»»Æ÷ÕâÊÇÊ×´Î
                       ÔËÐÐ;
  114 0000000E         ;              c) SÉèÖÃÖ÷¶ÑÕ»OS_CPU_ExceptStkBase;
  115 0000000E         ;              d) ÉèÖÃOSRunning Îª TRUE;
  116 0000000E         ;              e) ´¥·¢PendSVÒì³£;
  117 0000000E         ;              f) Ê¹ÄÜÖÐ¶Ï(Í¨¹ýÊ¹ÄÜÖÐ¶ÏÈÎÎñÔËÐÐ)¡£
  118 0000000E         ;*******************************************************
                       *************************************************
  119 0000000E         
  120 0000000E         OSStartHighRdy
  121 0000000E 481F            LDR              R0, =NVIC_SYSPRI14 ; ×°ÔØÏµÍ³Òì
                                                            ³£ÓÅÏÈ¼¶¼Ä´æÆ÷PRI_1
                                                            4¡£
  122 00000010         ; ¼´ÉèÖÃPendSVÖÐ¶ÏÓÅÏÈ¼¶µÄ¼Ä´æÆ÷¡£
  123 00000010 F04F 01FF       LDR              R1, =NVIC_PENDSV_PRI ; ×°ÔØ Pen
                                                            dSVµÄ¿É±à³ÌÓÅÏÈ¼¶(2
                                                            55)¡£
  124 00000014 7001            STRB             R1, [R0]    ; ÎÞ·ûºÅ×Ö½Ú¼Ä´æÆ÷´
                                                            æ´¢¡£R1ÊÇÒª´æ´¢µÄ¼Ä
                                                            ´æÆ÷¡£
  125 00000016         ; ´æ´¢µ½ÄÚ´æµØÖ·Ëù»ùÓÚµÄ¼Ä´æÆ÷¡£
  126 00000016         
  127 00000016 2000            MOVS             R0, #0      ; ÉèÖÃPSP Îª0 £¬ÎªÁ
                                                            Ë³õÊ¼»¯ÉÏÏÂÎÄÇÐ»»µ÷
                                                            ÓÃ.
  128 00000018 F380 8809       MSR              PSP, R0
  129 0000001C         
  130 0000001C 481C            LDR              R0, =OS_CPU_ExceptStkBase ; ³õÊ
                                                            ¼»¯OS_CPU_ExceptStk
                                                            BaseÖÐµÄMSP
  131 0000001E 6801            LDR              R1, [R0]
  132 00000020 F381 8808       MSR              MSP, R1
  133 00000024         
  134 00000024 481B            LDR              R0, =OSRunning 
                                                            ; OSRunning = TRUE
  135 00000026 2101            MOVS             R1, #1
  136 00000028 7001            STRB             R1, [R0]
  137 0000002A         
  138 0000002A 481B            LDR              R0, =NVIC_INT_CTRL ; ´¥·¢PendSV
                                                            Òì³£(Ôì³ÉÉÏÏÂÎÄÇÐ»»
                                                            )¡£
  139 0000002C F04F 5180       LDR              R1, =NVIC_PENDSVSET
  140 00000030 6001            STR              R1, [R0]
  141 00000032         
  142 00000032 B662            CPSIE            I           ; ¿ªÖÐ¶Ï£¨Æô¶¯ÖÐ¶Ï´
                                                            ¦Àí£©¡£
  143 00000034         
  144 00000034         OSStartHang
  145 00000034 E7FE            B                OSStartHang ; ²»Ó¦¸ÃÖ´ÐÐµ½ÕâÀïÀ



ARM Macro Assembler    Page 5 


                                                            ´¡£
  146 00000036         
  147 00000036         
  148 00000036         ;*******************************************************
                       *************************************************
  149 00000036         ;                                       Ö´ÐÐÉÏÏÂÎÄÇÐ»»(´
                       ÓÈÎÎñ¼¶ÇÐ»»)
  150 00000036         ;                                           void OSCtxSw
                       (void)
  151 00000036         ;
  152 00000036         ; Note(s) : 1) Õâ¸öº¯ÊýÔÚÖ´ÐÐÉÏÏÂÎÄÇÐ»»Ê±±»µ÷ÓÃ¡£Õâ¸öº¯Ê
                       ý´¥·¢PendSVÒì³££¬Íê³ÉÖ¸¶¨ÈÎÎñ¡£
  153 00000036         ;*******************************************************
                       *************************************************
  154 00000036         
  155 00000036         OSCtxSw
  156 00000036 4818            LDR              R0, =NVIC_INT_CTRL ; ´¥·¢PendSV
                                                            Òì³£(Ôì³ÉÉÏÏÂÎÄÇÐ»»
                                                            )¡£
  157 00000038 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  158 0000003C 6001            STR              R1, [R0]
  159 0000003E 4770            BX               LR
  160 00000040         
  161 00000040         ;*******************************************************
                       *************************************************
  162 00000040         ;                                       Ö´ÐÐÉÏÏÂÎÄÇÐ»» (
                       ´ÓÖÐ¶Ï¼¶ÇÐ»»)
  163 00000040         ;                                         void OSIntCtxS
                       w(void)
  164 00000040         ;
  165 00000040         ; Notes:    1) OSIntCtxSw()½«±»OSIntExit()µ÷ÓÃ¡£µ±È·¶¨Ðè
                       ÒªÉÏÏÂÎÄÇÐ»»£¬ÐèÒª½ûÖ¹ÖÐ¶Ï¡£
  166 00000040         ;              Õâ¸öº¯ÊýÖ»ÊÇ´¥·¢PendSVÒì³£¡£
  167 00000040         ;*******************************************************
                       *************************************************
  168 00000040         
  169 00000040         OSIntCtxSw
  170 00000040 4815            LDR              R0, =NVIC_INT_CTRL ; ´¥·¢PendSV
                                                            Òì³£(Ôì³ÉÉÏÏÂÎÄÇÐ»»
                                                            )¡£
  171 00000042 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  172 00000046 6001            STR              R1, [R0]
  173 00000048 4770            BX               LR
  174 0000004A         
  175 0000004A         ;*******************************************************
                       *************************************************
  176 0000004A         ;                                            ´¦ÀíPendSVÒ
                       ì³£
  177 0000004A         ;                                     void OS_CPU_PendSV
                       Handler(void)
  178 0000004A         ;
  179 0000004A         ; Note(s) : 1) PendSVÊÇÓÃÀ´ÒýÆðÉÏÏÂÎÄÇÐ»».  This is a re
                       commended method for performing
  180 0000004A         ;              context switches with Cortex-M3.  This is
                        because the Cortex-M3 auto-saves half of the
  181 0000004A         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
  182 0000004A         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception



ARM Macro Assembler    Page 6 


  183 0000004A         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
  184 0000004A         ;              a thread or occurs due to an interrupt or
                        exception.
  185 0000004A         ;
  186 0000004A         ;           2) Pseudo-code is:
  187 0000004A         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
  188 0000004A         ;              b) Save remaining regs r4-r11 on process 
                       stack;
  189 0000004A         ;              c) Save the process SP in its TCB, OSTCBC
                       ur->OSTCBStkPtr = SP;
  190 0000004A         ;              d) Call OSTaskSwHook();
  191 0000004A         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
  192 0000004A         ;              f) Get current ready thread TCB, OSTCBCur
                        = OSTCBHighRdy;
  193 0000004A         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdy->OSTCBStkPtr;
  194 0000004A         ;              h) Restore R4-R11 from new process stack;
                       
  195 0000004A         ;              i) Perform exception return which will re
                       store remaining context.
  196 0000004A         ;
  197 0000004A         ;           3) On entry into PendSV handler:
  198 0000004A         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  199 0000004A         ;                 xPSR, PC, LR, R12, R0-R3
  200 0000004A         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  201 0000004A         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  202 0000004A         ;              d) OSTCBCur      points to the OS_TCB of 
                       the task to suspend
  203 0000004A         ;                 OSTCBHighRdy  points to the OS_TCB of 
                       the task to resume
  204 0000004A         ;
  205 0000004A         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
  206 0000004A         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  207 0000004A         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  208 0000004A         ;*******************************************************
                       *************************************************
  209 0000004A         
  210 0000004A         ;ÐÞ¸Ä£¬½«OS_CPU_PendSVHandler¸ÄÎªPendSV_HandlerÖ÷ÒªÎªÁË¼
                       æÈÝST¿âÎÄ¼þ
  211 0000004A         PendSV_Handler
  212 0000004A B672            CPSID            I           ; ·ÀÖ¹ÔÚ½øÐÐÉÏÏÂÎÄÇ
                                                            Ð»»ÆÚ¼ä±»ÖÐ¶Ï¡££¨¹Ø
                                                            ÖÐ¶Ï: "CPSID I" µÈÍ
                                                            ¬ÓÚ "PRIMASK=1"£©¡£
                                                            
  213 0000004C F3EF 8009       MRS              R0, PSP     ; ¶ÁÈ¡½ø³ÌÖ¸ÕëPSPµ½
                                                            R0¡£
  214 00000050 B128            CBZ              R0, OS_CPU_PendSVHandler_nosave
 
                                                            ; µ±PSP = 0£¨±È½ÏR0



ARM Macro Assembler    Page 7 


                                                            £©Ê±£¬¾ÍÌø×ªµ½OS_CP
                                                            U_PendSVHandler_nos
                                                            ave¡£
  215 00000052         
  216 00000052 3820            SUBS             R0, R0, #0x20 ; R0-0x20,²¢¸üÐÂ±
                                                            êÖ¾£¨SUBSÓÐ"S"ºó×º£
                                                            ©£¨±£´æR4-R11¼Ä´æÆ÷
                                                            £©
  217 00000054 E880 0FF0       STM              R0, {R4-R11} ; ×°ÔØ£¨Á¬Ðø´æ´¢£©
                                                            R4-R11¡£
  218 00000058         
  219 00000058 4910            LDR              R1, =OSTCBCur ; OSTCBCur->OSTCB
                                                            StkPtr = SP;
  220 0000005A 6809            LDR              R1, [R1]
  221 0000005C 6008            STR              R0, [R1]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  222 0000005E         
  223 0000005E         ; At this point, entire context of process has been save
                       d
  224 0000005E         OS_CPU_PendSVHandler_nosave
  225 0000005E B500            PUSH             {R14}       ; Save LR exc_retur
                                                            n value
  226 00000060 480F            LDR              R0, =OSTaskSwHook 
                                                            ; OSTaskSwHook();
  227 00000062 4780            BLX              R0
  228 00000064 F85D EB04       POP              {R14}
  229 00000068         
  230 00000068 480E            LDR              R0, =OSPrioCur ; OSPrioCur = OS
                                                            PrioHighRdy;
  231 0000006A 490F            LDR              R1, =OSPrioHighRdy
  232 0000006C 780A            LDRB             R2, [R1]
  233 0000006E 7002            STRB             R2, [R0]
  234 00000070         
  235 00000070 480A            LDR              R0, =OSTCBCur ; OSTCBCur  = OST
                                                            CBHighRdy;
  236 00000072 490E            LDR              R1, =OSTCBHighRdy
  237 00000074 680A            LDR              R2, [R1]
  238 00000076 6002            STR              R2, [R0]
  239 00000078         
  240 00000078 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            Rdy->OSTCBStkPtr;
  241 0000007A E890 0FF0       LDM              R0, {R4-R11} ; Restore r4-11 fr
                                                            om new process stac
                                                            k
  242 0000007E 3020            ADDS             R0, R0, #0x20
  243 00000080 F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  244 00000084 F04E 0E04       ORR              LR, LR, #0x04 ; Ensure exceptio
                                                            n return uses proce
                                                            ss stack
  245 00000088 B662            CPSIE            I
  246 0000008A 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context
  247 0000008C         
  248 0000008C                 END
              E000ED22 



ARM Macro Assembler    Page 8 


              00000000 
              00000000 
              E000ED04 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=.\stm322
xg-eval\os_cpu_a.d -o.\stm322xg-eval\os_cpu_a.o -IC:\Keil\ARM\RV31\INC -IC:\Kei
l\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F2xx --predefine="__MICROLIB SETA
 1" --list=.\stm322xg-eval\os_cpu_a.lst ..\..\..\..\Utilities\uCOS-II\Ports\os_
cpu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 58 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
   Uses
      None
Comment: .text unused
OSCtxSw 00000036

Symbol: OSCtxSw
   Definitions
      At line 155 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 40 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
Comment: OSCtxSw used once
OSIntCtxSw 00000040

Symbol: OSIntCtxSw
   Definitions
      At line 169 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 41 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
Comment: OSIntCtxSw used once
OSStartHang 00000034

Symbol: OSStartHang
   Definitions
      At line 144 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 145 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
Comment: OSStartHang used once
OSStartHighRdy 0000000E

Symbol: OSStartHighRdy
   Definitions
      At line 120 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 39 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
Comment: OSStartHighRdy used once
OS_CPU_PendSVHandler_nosave 0000005E

Symbol: OS_CPU_PendSVHandler_nosave
   Definitions
      At line 224 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 214 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
Comment: OS_CPU_PendSVHandler_nosave used once
OS_CPU_SR_Restore 00000008

Symbol: OS_CPU_SR_Restore
   Definitions
      At line 101 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 38 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
Comment: OS_CPU_SR_Restore used once
OS_CPU_SR_Save 00000000

Symbol: OS_CPU_SR_Save



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 96 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 37 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
Comment: OS_CPU_SR_Save used once
PendSV_Handler 0000004A

Symbol: PendSV_Handler
   Definitions
      At line 211 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 43 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
Comment: PendSV_Handler used once
9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 49 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 138 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
      At line 156 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
      At line 170 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 52 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 139 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
      At line 157 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
      At line 171 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm

NVIC_PENDSV_PRI 000000FF

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 51 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 123 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 50 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 121 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
Comment: NVIC_SYSPRI14 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 32 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
   Uses
      None
Comment: OSIntExit unused
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 28 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 230 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
Comment: OSPrioCur used once
OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 29 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 231 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
Comment: OSPrioHighRdy used once
OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 27 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 134 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
Comment: OSRunning used once
OSTCBCur 00000000

Symbol: OSTCBCur
   Definitions
      At line 30 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 219 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
      At line 235 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm

OSTCBHighRdy 00000000

Symbol: OSTCBHighRdy
   Definitions
      At line 31 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 236 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
Comment: OSTCBHighRdy used once
OSTaskSwHook 00000000

Symbol: OSTaskSwHook
   Definitions
      At line 33 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 226 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
Comment: OSTaskSwHook used once
OS_CPU_ExceptStkBase 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Symbol: OS_CPU_ExceptStkBase
   Definitions
      At line 34 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
   Uses
      At line 130 in file ..\..\..\..\Utilities\uCOS-II\Ports\os_cpu_a.asm
Comment: OS_CPU_ExceptStkBase used once
8 symbols
354 symbols in table
